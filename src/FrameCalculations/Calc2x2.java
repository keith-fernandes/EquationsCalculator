/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FrameCalculations;

import Calculations.TwoByTwo;
import FrameMenus.CalculationMenu;
import FrameOptions.History;
import static Utilities.Utilities.formated;
import java.awt.Image;
import java.awt.Toolkit;
import static java.lang.Double.POSITIVE_INFINITY;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;

/**
 *
 * @author dacsa
 */
public class Calc2x2 extends javax.swing.JFrame {

    /**
     * Creates new form Calc2x2. Set new dimensions and a center position for
     * the window, as well as an icon image.
     *
     * @param username - Variable we used to track and interact with the User.
     *
     */
    public Calc2x2(String username) {
        initComponents();
        this.setLocationRelativeTo(null);
        welcomeLabel.setText("Hi, " + username);
        Image icon = Toolkit.getDefaultToolkit().getImage("DK1.png");
        this.setIconImage(icon);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        welcomeLabel = new javax.swing.JLabel();
        calculateButton = new javax.swing.JButton();
        clearFieldsButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        saveCalcButton = new javax.swing.JButton();
        varE = new javax.swing.JTextField();
        varB = new javax.swing.JTextField();
        varA = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        varF = new javax.swing.JTextField();
        varD = new javax.swing.JTextField();
        history = new javax.swing.JButton();
        varC = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        warning = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        labelResult = new javax.swing.JLabel();
        varXresult = new javax.swing.JLabel();
        varYresult = new javax.swing.JLabel();
        determinantError = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        n1 = new javax.swing.JTextField();
        n2 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculation of Simultaneous Equations");
        setBackground(new java.awt.Color(255, 255, 255));

        welcomeLabel.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        welcomeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        welcomeLabel.setText("Hi");

        calculateButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        calculateButton.setText("Calculate");
        calculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateButtonActionPerformed(evt);
            }
        });

        clearFieldsButton.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        clearFieldsButton.setText("CLEAR");
        clearFieldsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFieldsButtonActionPerformed(evt);
            }
        });

        backButton.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        backButton.setText("BACK");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        saveCalcButton.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        saveCalcButton.setText("SAVE");
        saveCalcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCalcButtonActionPerformed(evt);
            }
        });

        varE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                varAFocusGained(evt);
            }
        });
        varE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                varAKeyReleased(evt);
            }
        });

        varB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                varAFocusGained(evt);
            }
        });
        varB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                varAKeyReleased(evt);
            }
        });

        varA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                varAFocusGained(evt);
            }
        });
        varA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                varAKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("X +");

        varF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                varAFocusGained(evt);
            }
        });
        varF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                varAKeyReleased(evt);
            }
        });

        varD.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                varAFocusGained(evt);
            }
        });
        varD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                varAKeyReleased(evt);
            }
        });

        history.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        history.setText("HISTORY");
        history.setAlignmentY(0.0F);
        history.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyActionPerformed(evt);
            }
        });

        varC.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                varAFocusGained(evt);
            }
        });
        varC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                varAKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Insert the numeric values for the two equations");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("Equation 2");

        title.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Equation Calculator");
        title.setAlignmentY(0.0F);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("Equation 1");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setText("Y ");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setText("X +");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(153, 153, 153));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("e.g. (5)x + (-2)y + (-5) = 2    .:   5x - 2y -5 = 2");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(153, 153, 153));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("If any value is negative, add a minus symbol in front of it");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Y ");

        warning.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        warning.setForeground(new java.awt.Color(255, 0, 51));
        warning.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        warning.setText("  ");

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        labelResult.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelResult.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelResult.setText("Result:");

        varXresult.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        varXresult.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        varXresult.setText("X = ");

        varYresult.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        varYresult.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        varYresult.setText("Y = ");

        determinantError.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        determinantError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(varXresult, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(121, 121, 121)
                .addComponent(varYresult)
                .addContainerGap(141, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(determinantError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {varXresult, varYresult});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelResult, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(determinantError, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(varXresult, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(varYresult))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {varXresult, varYresult});

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("+");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("+");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("=");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel13.setText("=");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(153, 153, 153));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("If there is only x, y and = values, add a ZERO on the third space.");

        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));

        jSeparator2.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(142, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(119, 119, 119))
            .addComponent(warning, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 837, Short.MAX_VALUE)
            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(187, 187, 187)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(varA, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(varB, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(varC, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(varD, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(n2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(n1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(varF, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(varE, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator2)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(welcomeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(0, 105, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(saveCalcButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(clearFieldsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(history)
                                    .addGap(18, 18, 18)
                                    .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(91, 91, 91))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(calculateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(116, 116, 116)))))
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(166, 166, 166)
                .addComponent(warning, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(varA, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(varB, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(varE, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(n1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(varC, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(varD, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(n2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(varF, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(120, 120, 120))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(33, 33, 33)
                    .addComponent(title)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(welcomeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(1, 1, 1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(62, 62, 62)
                    .addComponent(calculateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 375, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(history, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(saveCalcButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clearFieldsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(33, 33, 33)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This button will calculate the equations according to input given by the
     * user.
     *
     * @param evt - click.
     */
    private void calculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateButtonActionPerformed
        // TODO add your handling code here:
        double A, B, N1,
                C, D, N2,
                E, F;

        try {
            //Getting the text input from the user and parsing into double
            A = Double.parseDouble(varA.getText());
            B = Double.parseDouble(varB.getText());
            C = Double.parseDouble(varC.getText());
            D = Double.parseDouble(varD.getText());
            N1 = Double.parseDouble(n1.getText());
            N2 = Double.parseDouble(n2.getText());
            E = Double.parseDouble(varE.getText()) + (N1 * (-1));
            F = Double.parseDouble(varF.getText()) + (N2 * (-1));
            System.out.println(E + F);
            /**
             * Calling method twoBytwo to solve the equations. It will pass the
             * variables collected as parameters.
             */
            double[][] result = TwoByTwo.twoBytwo(A, B, C, D, E, F);

            /**
             * If the Matrix result come back as INFINITY, that means that the
             * determinant couldn't be calculated. We will display it to the
             * user.
             */
            if (result[0][0] == POSITIVE_INFINITY && result[1][0] == POSITIVE_INFINITY) {
                labelResult.setText("Result: NO SOLUTION!");
                determinantError.setText("Determinant equals to zero.");
                varXresult.setText(" ");
                varYresult.setText(" ");
            } else {
                /**
                 * If there was a valid result, we will display it. The results
                 * were formatted in a way that if the number is a decimal, we
                 * will display the decimals up to two numbers after the comma,
                 * rounded up. If the number is an integer, we will eliminate
                 * the comma and anything after it.
                 */
                labelResult.setText("Result:");
                determinantError.setText(" ");
                /**
                 * ************************************************************************************************
                 * This code was based on a post from Vishnu Suresh, on 10 July
                 * 2017 to a forum discussion on StackOverflow web site,
                 * available here:
                 * https://stackoverflow.com/questions/10620448/most-simple-code-to-populate-jtable-from-resultset
                 * and from Santiago, on 13 March 2012, available here:
                 * https://stackoverflow.com/questions/2808535/round-a-double-to-2-decimal-places
                 */
                DecimalFormat df = new DecimalFormat("####0.00");

                for (int i = 0; i < 2; i++) {
                    for (int j = 0; j < 1; j++) {
                        Double d = result[i][j];
                        String str = String.valueOf(d).split("\\.")[1];
                        if (i == 0) {
                            if (str.equals("0")) {
                                varXresult.setText("X = " + d.longValue());
                            } else {
                                varXresult.setText("X = " + df.format(result[0][0]));
                            }
                        } else if (i == 1) {
                            if (str.equals("0")) {
                                varYresult.setText("Y = " + d.longValue());
                            } else {
                                varYresult.setText("Y = " + df.format(result[1][0]));
                            }
                        }
                    }
                }
            }

        } catch (NumberFormatException e) {
            //In case the user types something that is not a valid number.
            JOptionPane.showMessageDialog(null,"One or more values are not numbers or are missing!\nTry again!", 
                                                                              "Failed", JOptionPane.ERROR_MESSAGE);
            warning.setText("All fields must be filled correctly. Check them again, please!");
        }
    }//GEN-LAST:event_calculateButtonActionPerformed

    private void clearFieldsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFieldsButtonActionPerformed
        /**
         * This button clears the fields so the user can start over. There will
         * be two options: To save the result (if there is anything to save), or
         * clear without saving.
         */
        //------------------- Option 1-(Left)----- Option 2-(Right)-------------
        Object[] options = {"Save your result", "Clear without saving"};
        int opt = JOptionPane.showOptionDialog(Calc2x2.this, "What would you like to do?", " You are clearing the fields ",
                JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[1]);
        //Option Save Results
        if (opt == JOptionPane.YES_OPTION) {
            saveCalcButtonActionPerformed(null);
        } else {
            //Option clear without saving
            clearVars();
        }
    }//GEN-LAST:event_clearFieldsButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        /**
         * Back button will take the user back to the Calculation menu and
         * dispose of the current menu. It will also give the name of the User
         * as a parameter to be used in the greeting label.
         */
        CalculationMenu calcMenu = new CalculationMenu(welcomeLabel.getText().substring(4).trim());
        calcMenu.setVisible(true);
        dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void saveCalcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCalcButtonActionPerformed
        /**
         * Saving the results of a calculation. We check if there is a result by
         * measuring the size of the output of the result textfields (varXresult
         * and labelResult).
         */
        if (varXresult.getText().length() < 5 && labelResult.getText().length() < 8) {
            JOptionPane.showMessageDialog(null, "Complete the equations and press CALCULATE button.", 
                                            "There is no result to save",JOptionPane.WARNING_MESSAGE);
            warning.setText("All fields must be filled correctly. Check them again, please!");

        } else {
            double A, B, N1, C, D, N2, E, F;
            int iduser = 0;
            String equation1 = null, equation2 = null;
            String result = varXresult.getText() + "   " + varYresult.getText();
            /**
             * If determinant is equal to zero. THe labelResult will be changed
             * and the equation will be saved displaying that the equation had
             * no result and the reason.
             */
            if (labelResult.getText().length() >= 8) {
                result = "NO SOLUTION! Determinant = ZERO.";
            }
            try {
                //Converts the input Text to Double
                A = Double.parseDouble(varA.getText());
                B = Double.parseDouble(varB.getText());
                N1 = Double.parseDouble(n1.getText());
                N2 = Double.parseDouble(n2.getText());
                C = Double.parseDouble(varC.getText());
                D = Double.parseDouble(varD.getText());
                E = Double.parseDouble(varE.getText());
                F = Double.parseDouble(varF.getText());
                System.out.println(E + F);

                /**
                 * If the extra numbers in the equations are zero. Then we don't
                 * need to display them when saving.
                 */
                if (N1 == 0 && N2 == 0) {

                    Double[] variables = {A, B, C, D, E, F};

                    /**
                     * An array String to receive the text version of the
                     * values. It will call the method from utilities.
                     */
                    String[] formated = formated(variables);
                    /**
                     * This condition will verify if the numbers are negative or
                     * positive. This will help us to save the correct format of
                     * the equation, by adding a 'minus' symbol instead of the
                     * default 'plus'.
                     *
                     */
                    if (formated[1].contains("-") && formated[3].contains("-")) {
                        equation1 = formated[0] + "x" + formated[1] + "y" + " = " + formated[4];
                        equation2 = formated[2] + "x" + formated[3] + "y" + " = " + formated[5];

                    } else if (formated[1].contains("-") && !formated[3].contains("-")) {
                        equation1 = formated[0] + "x" + formated[1] + "y" + " = " + formated[4];
                        equation2 = formated[2] + "x" + "+" + formated[3] + "y" + " = " + formated[5];

                    } else if (!formated[1].contains("-") && formated[3].contains("-")) {
                        equation1 = formated[0] + "x" + "+" + formated[1] + "y" + " = " + formated[4];
                        equation2 = formated[2] + "x" + formated[3] + "y" + " =" + formated[5];

                    } else {
                        equation1 = formated[0] + "x" + "+" + formated[1] + "y" + " = " + formated[4];
                        equation2 = formated[2] + "x" + "+" + formated[3] + "y" + " = " + formated[5];
                    }
                    /**
                     * If they are not zero. This will format them.
                     */
                } else {

                    Double[] variables = {A, B, N1, C, D, N2, E, F};

                    String[] formated = formated(variables);

                    //ALL NEGATIVE
                    if (formated[1].contains("-") && formated[2].contains("-")) {
                        equation1 = formated[0] + "x" + formated[1] + "y" + formated[2] + " = " + formated[6];
                        //ALL POSITIVE
                    } else if (!formated[1].contains("-") && !formated[2].contains("-") && variables[2] != 0) {
                        equation1 = formated[0] + "x" + "+" + formated[1] + "y" + "+" + formated[2] + " = " + formated[6];
                        //N NEGATIVE
                    } else if (!formated[1].contains("-") && formated[2].contains("-")) {
                        equation1 = formated[0] + "x" + "+" + formated[1] + "y" + formated[2] + " = " + formated[6];
                        //Y NEGATIVE
                    } else if (formated[1].contains("-") && !formated[2].contains("-")) {
                        equation1 = formated[0] + "x" + formated[1] + "y" + "+" + formated[2] + " = " + formated[6];
                        //N is ZERO
                    } else if (variables[2] == 0) {
                        //and Y NEGATIVE
                        if (formated[1].contains("-")) {
                            equation1 = formated[0] + "x" + formated[1] + "y" + " = " + formated[6];
                        } //and Y POSITIVE
                        else {
                            equation1 = formated[0] + "x" + "+" + formated[1] + "y" + " = " + formated[6];
                        }

                    }
                    //ALL NEGATIVE
                    if (formated[4].contains("-") && formated[5].contains("-")) {
                        equation2 = formated[3] + "x" + formated[4] + "y" + formated[5] + " = " + formated[7];
                        //ALL POSITIVE
                    } else if (!formated[4].contains("-") && !formated[5].contains("-") && variables[5] != 0) {
                        equation2 = formated[3] + "x" + "+" + formated[4] + "y" + "+" + formated[5] + " = " + formated[7];
                        //N NEGATIVE
                    } else if (!formated[4].contains("-") && formated[5].contains("-")) {
                        equation2 = formated[3] + "x" + "+" + formated[4] + "y" + formated[5] + " = " + formated[7];
                        //Y NEGATIVE
                    } else if (formated[4].contains("-") && !formated[5].contains("-")) {
                        equation2 = formated[3] + "x" + formated[4] + "y" + "+" + formated[5] + " = " + formated[7];
                        //N is ZERO
                    } else if (variables[5] == 0) {
                        //and Y NEGATIVE
                        if (formated[4].contains("-")) {
                            equation1 = formated[3] + "x" + formated[4] + "y" + " = " + formated[7];
                        } // and Y POSITIVE
                        else {
                            equation1 = formated[3] + "x" + "+" + formated[4] + "y" + " = " + formated[7];
                        }
                    }
                }
                try {
                    //Connecting to the database
                    Class.forName("com.mysql.cj.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/EquationsCalculator", 
                                                                                                    "root", "root");
                    
                    String checkUser = "SELECT iduser FROM users WHERE username=?";
                    String checkEQ = "SELECT * FROM calculator WHERE equation1=? and equation2=? and results=? and iduser=?";

                    PreparedStatement pstCheck = con.prepareStatement(checkUser);
                    pstCheck.setString(1, welcomeLabel.getText().substring(4).trim().toLowerCase());

                    ResultSet rs = pstCheck.executeQuery();
                    if (rs.next()) {
                        iduser = rs.getInt("iduser");
                    }

                    pstCheck = con.prepareStatement(checkEQ);
                    pstCheck.setString(1, equation1);
                    pstCheck.setString(2, equation2);
                    pstCheck.setString(3, result);
                    pstCheck.setInt(4, iduser);

                    rs = pstCheck.executeQuery();

                    //Check if the equation has been done and saved before.
                    if (rs.next()) {
                        JOptionPane.showMessageDialog(null, "\nEquation already saved!\nCheck your history.",
                                                                    "Duplicate", JOptionPane.WARNING_MESSAGE);
                    } else {
                        //Select the User and store the equations and results
                        String addEquation = "INSERT INTO calculator (iduser, equation1, equation2, results) "
                                                                                    + "VALUES (?, ?, ?, ?)";

                        PreparedStatement pst = con.prepareStatement(addEquation);

                        pst.setInt(1, iduser);
                        pst.setString(2, equation1);
                        pst.setString(3, equation2);
                        pst.setString(4, result);

                        if (pst.executeUpdate() != 0) {
                            JOptionPane.showMessageDialog(null, "Result Saved to database", 
                                                "Success!", JOptionPane.INFORMATION_MESSAGE);
                            clearVars();
                            pst.close();

                        } else {

                            JOptionPane.showMessageDialog(null, "Result was not saved!",
                                      "Something went wrong", JOptionPane.ERROR_MESSAGE);

                            pst.close();
                            con.close();
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e, "\nSaving Not Successful", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException e) {
                //In case the user types something that is not a valid number or leaves any field empty..
               JOptionPane.showMessageDialog(null,"One or more values are not numbers or are missing!\nTry again!", 
                                                                              "Failed", JOptionPane.ERROR_MESSAGE);
                warning.setText("All fields must be filled. Check them again, please!");
            }
        }
    }//GEN-LAST:event_saveCalcButtonActionPerformed

    private void historyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyActionPerformed
        // TODO add your handling code here:
        /**
         * This button will take the user to its History of calculations. It
         * will also pass the name of the User as a parameter to be used in the
         * greeting label.
         */
        History newList = new History(welcomeLabel.getText().substring(4).trim());
        newList.setVisible(true);
        dispose();
    }//GEN-LAST:event_historyActionPerformed

    private void varAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_varAKeyReleased
        /**
         * It will clear the input mistake warning once the user start typing
         * again.
         */
        warning.setText("");
    }//GEN-LAST:event_varAKeyReleased

    private void varAFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_varAFocusGained
        /**
         * It will clear the input mistake warning once the user clicks on any
         * field again.
         */
        warning.setText("");
    }//GEN-LAST:event_varAFocusGained

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    public javax.swing.JButton calculateButton;
    private javax.swing.JButton clearFieldsButton;
    private javax.swing.JLabel determinantError;
    private javax.swing.JButton history;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labelResult;
    private javax.swing.JTextField n1;
    private javax.swing.JTextField n2;
    private javax.swing.JButton saveCalcButton;
    private javax.swing.JLabel title;
    private javax.swing.JTextField varA;
    private javax.swing.JTextField varB;
    private javax.swing.JTextField varC;
    private javax.swing.JTextField varD;
    private javax.swing.JTextField varE;
    private javax.swing.JTextField varF;
    private javax.swing.JLabel varXresult;
    private javax.swing.JLabel varYresult;
    private javax.swing.JLabel warning;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * Method clearVars will clear the fields in the window. Also reseting X, Y
     * and the Result label.
     */
    private void clearVars() {
        varA.setText("");
        varB.setText("");
        varC.setText("");
        varD.setText("");
        varE.setText("");
        varF.setText("");
        n1.setText("");
        n2.setText("");
        varXresult.setText("X = ");
        varYresult.setText("Y = ");
        labelResult.setText("Result:");
        determinantError.setText("");
        warning.setText("");

    }
}
