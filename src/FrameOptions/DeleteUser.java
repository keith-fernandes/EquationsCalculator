/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FrameOptions;

import FrameMenus.AdminMenu;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;

/**
 *
 * @author dacsa
 */
public class DeleteUser extends javax.swing.JFrame {

    /**
     * Creates new form DeleteUser -and apply dimensions to set the window in
     * the middle of the screen
     *
     * @param admin - name of the current connected Admin for greeting and
     * tracking purposes
     */
    public DeleteUser(String admin) {
        initComponents();
        this.setLocationRelativeTo(null);
        welcomeLabel.setText("User: " + admin);
        Image icon = Toolkit.getDefaultToolkit().getImage("DK2.png");
        this.setIconImage(icon);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        confirmRemoveButton = new javax.swing.JButton();
        warningEmptyUser = new javax.swing.JLabel();
        backRegister = new javax.swing.JButton();
        deleteTitle = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        welcomeLabel = new javax.swing.JLabel();
        deletionTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Remove user");

        confirmRemoveButton.setText("CONFIRM REMOVE");
        confirmRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmRemoveButtonActionPerformed(evt);
            }
        });

        warningEmptyUser.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        warningEmptyUser.setForeground(new java.awt.Color(255, 51, 51));
        warningEmptyUser.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        backRegister.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        backRegister.setText("BACK");
        backRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backRegisterActionPerformed(evt);
            }
        });

        deleteTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        deleteTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        deleteTitle.setText("Please enter the username of the account you wish to remove");

        title.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Equation Calculator");
        title.setAlignmentY(0.0F);

        welcomeLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        welcomeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        welcomeLabel.setText("ADMIN MENU");

        deletionTextField.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        deletionTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                deletionTextFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(title, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(deleteTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 717, Short.MAX_VALUE)
            .addComponent(welcomeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(warningEmptyUser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(244, 244, 244)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(deletionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(confirmRemoveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(289, 289, 289)
                        .addComponent(backRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(welcomeLabel)
                .addGap(18, 18, 18)
                .addComponent(deleteTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deletionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(confirmRemoveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(warningEmptyUser, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 130, Short.MAX_VALUE)
                .addComponent(backRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void confirmRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmRemoveButtonActionPerformed
        //This string will hold the username to be deleted
        String username = deletionTextField.getText().trim();

        //Check to see if field is not empty
        if (username.isEmpty()) {
            warningEmptyUser.setText("*Username for deletion required");
        } else {
            /**
             * Deletion confirmation. Displays a message to the Admin to confirm
             * the action.
             */
            Object[] options = {"REMOVE", "CANCEL"};
            int opt = JOptionPane.showOptionDialog(DeleteUser.this,
                    "Removing the user will also remove all his calculations"
                    + "\nAre you sure you want to remove '" + username + "' from the list of users?",
                    " CAUTION! Action irreversible! ",
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[1]);
            //Option 'CANCEL' takes the Admin back.
            if (opt == JOptionPane.NO_OPTION) {
                this.setVisible(true);
                //Option 'REMOVE' will run the deletion code.
            } else {
                try {
                    //connecting to the database
                    Class.forName("com.mysql.cj.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/EquationsCalculator", "root", "root");
                    /**
                     * This query will check if the user exists.
                     */
                    String check = "Select * from users where username=?;";

                    PreparedStatement pstCheck = con.prepareStatement(check);

                    pstCheck.setString(1, username);

                    ResultSet rs = pstCheck.executeQuery();
                    /**
                     * Condition and error message in case the user does not
                     * exist. It will also bring the focus back to the field so
                     * the user can type again.
                     */
                    if (!rs.next()) {
                        JOptionPane.showMessageDialog(null, "Username doesn't exist!", 
                                                 "Failed", JOptionPane.ERROR_MESSAGE);
                        deletionTextField.setText("");
                        deletionTextField.requestFocus();
                        pstCheck.close();
                        /**
                         * Condition if user to be deleted is an Admin. It will
                         * show the error message and bring the focus back to
                         * the field so the user can type again.
                         */
                    } else if (rs.getString("userAdmin").equals("YES")) {
                        JOptionPane.showMessageDialog(null, "You can't remove an Admin!\n", 
                                                      "Failed", JOptionPane.ERROR_MESSAGE);
                        deletionTextField.setText("");
                        deletionTextField.requestFocus();
                        pstCheck.close();

                    } else {
                        /**
                         * In case the user exists and it is not an Admin. We
                         * will create another query to remove the user from the
                         * database.
                         */
                        //To remove the user we first need to remove the FK related to it
                        int iduser = rs.getInt("iduser");
                        String removeFK = "delete from calculator where iduser=?;";
                        String removeUser = "delete from users where username=?;";
                        //Passing the query to the statement.
                        PreparedStatement pstRemove = con.prepareStatement(removeFK);
                        //Passing the username as a parameter to complete the query.
                        pstRemove.setInt(1, iduser);
                        //Executing the query.
                        pstRemove.execute();

                        //Now that we removed the FK from Calculater (and all the user's calculations) we can safely delete the user
                        pstRemove = con.prepareStatement(removeUser);
                        pstRemove.setString(1, username);
                        pstRemove.execute();

                        /**
                         * Message of success. Clearing and bringing focus back
                         * to the field in case the Admin wants to remove
                         * another user.
                         */
                        JOptionPane.showMessageDialog(null, "User '" + username + "' removed from database", 
                                                    "Action Successful\n", JOptionPane.INFORMATION_MESSAGE);
                        deletionTextField.setText("");
                        deletionTextField.requestFocus();

                        pstRemove.close();
                        con.close();
                    }

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e,"\nAction Not Successful",JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_confirmRemoveButtonActionPerformed

    private void backRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backRegisterActionPerformed
        /**
         * Back button will take the admin back to its menu and dispose of the
         * Listing menu. It will also give the name of the Admin as a parameter
         * to be used in the greeting label.
         */
        AdminMenu newInfo = new AdminMenu(welcomeLabel.getText().substring(5).trim());
        newInfo.setVisible(true);
        dispose();
    }//GEN-LAST:event_backRegisterActionPerformed

    private void deletionTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deletionTextFieldKeyReleased
        // It will clear the warning label.
        warningEmptyUser.setText("");
    }//GEN-LAST:event_deletionTextFieldKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backRegister;
    private javax.swing.JButton confirmRemoveButton;
    private javax.swing.JLabel deleteTitle;
    private javax.swing.JTextField deletionTextField;
    private javax.swing.JLabel title;
    private javax.swing.JLabel warningEmptyUser;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables
}
